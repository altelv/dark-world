
import React, { useRef, useState } from 'react'
import type { Character, RollRequest, RollResolution } from '../game/state/types'
import { D20RollLauncher } from '../game/dice'
import { computeRollResolution, formatRollBreakdown } from '../game/state/rules'
import { runHiddenChecks, HiddenCheckResult } from '../game/hiddenChecks/engine'

type Enemy = { name:string, state:'–ù–µ —Ä–∞–Ω–µ–Ω—ã'|'–õ–µ–≥–∫–æ —Ä–∞–Ω–µ–Ω—ã'|'–¢—è–∂–µ–ª–æ —Ä–∞–Ω–µ–Ω—ã'|'–ü—Ä–∏ —Å–º–µ—Ä—Ç–∏'|'–ú—ë—Ä—Ç–≤' }

type Props = {
  character: Character
  setCharacter: (c:Character)=>void
  mode: '–ë–æ–π'|'–°—é–∂–µ—Ç'
  enemies: Enemy[]
  setEnemies: (e:Enemy[])=>void
  pendingRoll: RollRequest | null
  setPendingRoll: (r:RollRequest|null)=>void
  lastRoll: RollResolution | null
  setLastRoll: (r:RollResolution)=>void
}

export function CenterChat({ character, setCharacter, mode, enemies, setEnemies, pendingRoll, setPendingRoll, lastRoll, setLastRoll }: Props){
  const [sending, setSending] = useState(false)
  const [log, setLog] = useState<string[]>([ '‚Äî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ–º–Ω—ã–π –ú–∏—Ä, –æ–¥–∏–Ω–æ–∫–∞—è –¥—É—à–∞.' ])
  const taRef = useRef<HTMLTextAreaElement>(null)
  function push(msg:string){ setLog(l=>[...l, msg]) }

  function startRoll(skill?:string){
    const req: RollRequest = { skill:(skill as any)||'–ü–æ–∏—Å–∫', dc:15, luck:character.luck, fatigue:character.fatigue, inventiveness:0, mode }
    setPendingRoll(req)
  }
  function onRoll(decision: { d20:number }){
    if(!pendingRoll) return
    const result = computeRollResolution(character, pendingRoll, decision.d20)
    setLastRoll(result); setPendingRoll(null)
    const pre = result.success ? '–£–°–ü–ï–•!' : '–ü—Ä–æ–≤–∞–ª...'
    push(`${pre} ${formatRollBreakdown(result)}`)
  }

  async function onSend(){
    if(sending) return
    setSending(true)
    const txt = (taRef.current?.value||'').trim()
    taRef.current!.value = ''
    const hidden: HiddenCheckResult[] = await runHiddenChecks(mode, character)
    if(hidden.length){
      hidden.forEach(h=>{
        push(`**${h.title} ‚Äî —É—Å–ø–µ—Ö!**`)
        push(`‚Äî ${h.textHighlighted}`)
      })
    }else{
      push('‚Äî ‚Ä¶')
    }
    if(mode==='–ë–æ–π' && enemies.length){
      const line = '==–°—Ç–∞—Ç—É—Å –≤—Ä–∞–≥–æ–≤:== ' + enemies.map(e=>{
        const ico = e.state==='–ù–µ —Ä–∞–Ω–µ–Ω—ã'?'‚¨ú':e.state==='–õ–µ–≥–∫–æ —Ä–∞–Ω–µ–Ω—ã'?'üü®':e.state==='–¢—è–∂–µ–ª–æ —Ä–∞–Ω–µ–Ω—ã'?'üüß':e.state==='–ü—Ä–∏ —Å–º–µ—Ä—Ç–∏'?'üü•':'‚ò†'
        return `${e.name} ${ico}`
      }).join('  |  ')
      push(line)
    }
    setSending(false)
  }

  return (
    <div className="chat-wrap">
      <div className="dice-area"><D20RollLauncher request={pendingRoll} onRoll={onRoll} /></div>
      <div className="chat-log">
        {log.map((m,i)=>(<div className="chat-msg" key={i} dangerouslySetInnerHTML={{__html: m.replace(/==(.+?)==/g,'<span class="hl-yellow">$1</span>')}}/>))}
      </div>
      <div className="chat-input">
        <textarea ref={taRef} placeholder="–û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ..."/>
        <button className="btn btn-primary" disabled={sending} onClick={onSend}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        <button className="btn btn-gold" onClick={()=>startRoll()} disabled={!!pendingRoll}>–ë—Ä–æ—Å–∏—Ç—å d20</button>
      </div>
    </div>
  )
}
